{"version":3,"sources":["utilities/random.ts","ui/colors.ts","ui/TextField.tsx","ui/Row.tsx","utilities/sanitiseNumericString.ts","ui/Column.tsx","ui/InputLabel.tsx","ui/VectorInput.tsx","ui/NumberInput.tsx","components/content/Line.tsx","logic/Universe.ts","logic/UniverseContext.tsx","components/content/Content.tsx","components/environment/Lighting.tsx","components/environment/Environment.tsx","components/controls/InitialStateControls.tsx","components/controls/SimulationParameterControls.tsx","components/controls/Controls.tsx","utilities/useWindowDimensions.ts","App.tsx","index.tsx"],"names":["random","min","max","Math","floor","Colors","BLACK","Color","DARK","LIGHT","WHITE","hsv","TextField","value","onChange","style","focusFirstRender","onSubmit","onBlur","ariaLabel","inputRef","useRef","useEffect","current","focus","ref","className","e","target","onKeyDown","key","aria-label","flex","backgroundColor","toString","borderColor","fade","color","Row","styled","div","sanitiseNumericString","s","negative","pieces","replace","split","length","slice","join","Column","InputLabel","label","LabelContainer","VectorInput","onSubmitOrBlur","useState","x","setX","y","setY","z","setZ","update","useCallback","parseFloat","width","maxWidth","marginLeft","NumberInput","Line","points","geometry","BufferGeometry","setFromPoints","attach","linewidth","linecap","linejoin","extend","Line_","ThreeLine","Universe","render","state0","state","t","pathingDepth","pathingStepSize","bodyIdCounter","console","log","this","addBody","x0","Vector3","v0","m","setToInitialState","calculatePaths","autoBind","parameters","push","id","bodyId","mass","body","find","b","map","v","path","k","r","bodies","clone","V","step","i","j","copy","sub","normalize","multiplyScalar","add","UniverseContext","createContext","UniverseContextProvider","children","universe","Provider","useUniverse","useContext","Content","Lighting","intensity","Environment","position","left","right","top","bottom","background","camera","shadows","args","OrbitControls","autoRotate","InitialStateControls","Container","fontSize","BodyControlsContainer","name","val","setInitialMass","SimulationParameterControls","ControlsGroup","Controls","windowHeight","window","innerWidth","height","innerHeight","windowDimensions","setWindowDimensions","handleResize","addEventListener","removeEventListener","useWindowDimensions","ControlsContainer","maxHeight","App","setRenderHelper","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d696813f.chunk.js","sourcesContent":["export function random(min: number, max: number): number {\n  return Math.floor(Math.random() * (max - min) + min);\n}\n","import Color from \"color\";\nimport { random } from \"utilities\";\n\nexport const Colors = {\n  BLACK: Color(\"#000000\"),\n  DARK: Color(\"#101113\"),\n  LIGHT: Color(\"#DCDDDF\"),\n  WHITE: Color(\"#FFFFFF\"),\n  random: (): Color =>\n    Color.hsv(random(0, 360), random(50, 100), random(50, 100)),\n};\n","import React, { useEffect, useRef } from \"react\";\nimport \"./TextField.css\";\nimport { Colors } from \"./colors\";\n\ninterface Props {\n  value: string | number;\n  onChange: (newVal: string) => void;\n  style?: React.CSSProperties;\n  focusFirstRender?: boolean;\n  onSubmit?: () => void;\n  onBlur?: () => void;\n  ariaLabel?: string;\n}\n\nexport function TextField({\n  value,\n  onChange,\n  style,\n  focusFirstRender,\n  onSubmit,\n  onBlur,\n  ariaLabel,\n}: Props): React.ReactElement {\n  const inputRef = useRef<HTMLInputElement>(null);\n  useEffect(() => {\n    if (focusFirstRender) inputRef.current?.focus();\n  }, []);\n\n  return (\n    <input\n      ref={inputRef}\n      value={value}\n      className=\"input\"\n      onChange={(e): void => {\n        onChange(e.target.value);\n      }}\n      onBlur={onBlur}\n      onKeyDown={(e): void => {\n        if (e.key === \"Enter\") onSubmit?.();\n      }}\n      aria-label={ariaLabel}\n      style={{\n        flex: 1,\n        backgroundColor: Colors.DARK.toString(),\n        borderColor: Colors.LIGHT.fade(0.5).toString(),\n        color: Colors.LIGHT.toString(),\n        ...style,\n      }}\n    />\n  );\n}\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nexport const Row = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n`;\n","export function sanitiseNumericString(s: string): string {\n  if (!s) return s;\n  const negative = s[0] === \"-\";\n  const pieces = s.replace(/[^0-9.]/g, \"\").split(\".\");\n  return (\n    (negative ? \"-\" : \"\") +\n    (pieces.length >= 2\n      ? pieces[0] + \".\" + pieces.slice(1).join(\"\")\n      : pieces[0])\n  );\n}\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nexport const Column = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n`;\n","import React, { ReactElement } from \"react\";\nimport styled from \"styled-components\";\nimport { Colors } from \"./colors\";\n\ninterface Props {\n  label?: string;\n}\n\nexport function InputLabel({ label }: Props): ReactElement | null {\n  return label ? <LabelContainer>{label}</LabelContainer> : null;\n}\n\nconst LabelContainer = styled.div`\n  color: ${Colors.LIGHT.toString()};\n  font-size: 10px;\n`;\n","import React, {\n  CSSProperties,\n  ReactElement,\n  useCallback,\n  useEffect,\n  useState,\n} from \"react\";\nimport { Row } from \"./Row\";\nimport { Vector3 } from \"three\";\nimport { TextField } from \"./TextField\";\nimport { sanitiseNumericString } from \"../utilities/sanitiseNumericString\";\nimport { Column } from \"./Column\";\nimport { InputLabel } from \"./InputLabel\";\n\ninterface Props {\n  label?: string;\n  value: Vector3;\n  onSubmitOrBlur: (x: Vector3) => void;\n  style?: CSSProperties;\n}\n\n// This component will mutate the Vector\nexport function VectorInput({\n  label,\n  value,\n  onSubmitOrBlur,\n  style,\n}: Props): ReactElement {\n  const [x, setX] = useState(value.x.toString());\n  const [y, setY] = useState(value.y.toString());\n  const [z, setZ] = useState(value.z.toString());\n\n  useEffect(() => {\n    if (x != value.x.toString()) setX(value.x.toString());\n    if (y != value.y.toString()) setY(value.y.toString());\n    if (z != value.z.toString()) setZ(value.z.toString());\n  }, [value.x, value.y, value.z]);\n\n  const update = useCallback(() => {\n    setX(x || \"0\");\n    setY(y || \"0\");\n    setZ(z || \"0\");\n    value.setX(parseFloat(x || \"0\"));\n    value.setY(parseFloat(y || \"0\"));\n    value.setZ(parseFloat(z || \"0\"));\n    onSubmitOrBlur(value);\n  }, [value, x, y, z, setX, setY, setZ]);\n\n  return (\n    <Column style={style}>\n      <InputLabel label={label + \" (x, y, z)\"} />\n      <Row>\n        <TextField\n          value={x}\n          onChange={(x): void => {\n            setX(sanitiseNumericString(x));\n          }}\n          onSubmit={update}\n          onBlur={update}\n          style={{ width: 62, maxWidth: 62 }}\n        />\n        <TextField\n          value={y}\n          onChange={(y): void => {\n            setY(sanitiseNumericString(y));\n          }}\n          onSubmit={update}\n          onBlur={update}\n          style={{ marginLeft: 4, width: 62, maxWidth: 62 }}\n        />\n        <TextField\n          value={z}\n          onChange={(z): void => {\n            setZ(sanitiseNumericString(z));\n          }}\n          onSubmit={update}\n          onBlur={update}\n          style={{ marginLeft: 4, width: 62, maxWidth: 62 }}\n        />\n      </Row>\n    </Column>\n  );\n}\n","import React, {\n  CSSProperties,\n  ReactElement,\n  useCallback,\n  useEffect,\n  useState,\n} from \"react\";\nimport { TextField } from \"./TextField\";\nimport { sanitiseNumericString } from \"../utilities/sanitiseNumericString\";\nimport { Column } from \"./Column\";\nimport styled from \"styled-components\";\nimport { Colors } from \"./colors\";\nimport { InputLabel } from \"./InputLabel\";\n\ninterface Props {\n  label?: string;\n  value: number;\n  onSubmitOrBlur: (x: number) => void;\n  style?: CSSProperties;\n}\n\nexport function NumberInput({\n  label,\n  value,\n  onSubmitOrBlur,\n  style,\n}: Props): ReactElement {\n  const [x, setX] = useState(value.toString());\n\n  useEffect(() => {\n    if (x != value.toString()) setX(value.toString());\n  }, [value]);\n\n  const update = useCallback(() => {\n    setX(x || \"0\");\n    onSubmitOrBlur(parseFloat(x || \"0\"));\n  }, [value, x, setX]);\n\n  return (\n    <Column style={style}>\n      <InputLabel label={label} />\n      <TextField\n        value={x}\n        onChange={(x): void => {\n          setX(sanitiseNumericString(x));\n        }}\n        onSubmit={update}\n        onBlur={update}\n        style={{ width: style?.width ?? 62, maxWidth: style?.width ?? 62 }}\n      />\n    </Column>\n  );\n}\n\nconst LabelContainer = styled.div`\n  color: ${Colors.LIGHT.toString()};\n  font-size: 10px;\n`;\n","import { extend, ReactThreeFiber } from \"@react-three/fiber\";\nimport { BufferGeometry, Line as ThreeLine, Vector3 } from \"three\";\nimport Color from \"color\";\nimport React, { ReactElement, useRef } from \"react\";\nimport { Colors } from \"ui\";\n\nextend({ Line_: ThreeLine });\n\ndeclare global {\n  // eslint-disable-next-line @typescript-eslint/no-namespace\n  namespace JSX {\n    interface IntrinsicElements {\n      line_: ReactThreeFiber.Object3DNode<ThreeLine, typeof ThreeLine>;\n    }\n  }\n}\n\ninterface Props {\n  points: Vector3[];\n  color?: Color;\n}\n\nexport function Line({ points, color = Colors.random() }: Props): ReactElement {\n  const geometry = useRef(new BufferGeometry()).current;\n  geometry.setFromPoints(points);\n\n  return (\n    <line_ geometry={geometry}>\n      <lineBasicMaterial\n        attach=\"material\"\n        color={color.toString()}\n        linewidth={10}\n        linecap={\"round\"}\n        linejoin={\"round\"}\n      />\n    </line_>\n  );\n}\n","import { Body, BodyParameters } from \"./Body\";\nimport { Vector3 } from \"three\";\nimport autoBind from \"auto-bind\";\n\nconst G = 1;\n\nexport class Universe {\n  private state0: BodyParameters[] = [];\n  public state: Body[] = []; // TODO: should this be private? or called bodies?\n  private t = 0;\n\n  public pathingDepth = 40000;\n  public pathingStepSize = 0.001;\n\n  private bodyIdCounter = 0;\n\n  constructor(private render: () => void) {\n    console.log(\"Constructing a universe\");\n    this.addBody({\n      x0: new Vector3(0, 0, 0),\n      v0: new Vector3(0, 0, -0.12),\n      m: 100,\n    });\n    this.addBody({\n      x0: new Vector3(2.05, 0, 0),\n      v0: new Vector3(0, 1, 6),\n      m: 1,\n    });\n    this.addBody({\n      x0: new Vector3(1.95, 0, 0),\n      v0: new Vector3(0, -1, 6),\n      m: 1,\n    });\n    this.setToInitialState();\n    this.calculatePaths();\n    autoBind(this);\n  }\n\n  public addBody(parameters: Omit<BodyParameters, \"id\">): void {\n    // TODO: This assumes t = 0\n    this.state0.push({ ...parameters, id: `b${this.bodyIdCounter}` });\n    this.bodyIdCounter += 1;\n  }\n\n  public setInitialMass(bodyId: string, mass: number): void {\n    const body = this.state0.find((b) => (b.id = bodyId));\n    if (body) body.m = mass;\n  }\n\n  public update(): void {\n    this.setToInitialState(); // This shouldn't be in the final update method\n    this.calculatePaths();\n    this.render();\n  }\n\n  private setToInitialState(): void {\n    this.state = this.state0.map((body) => ({\n      ...body,\n      x: body.x0,\n      v: body.v0,\n      path: [body.x0],\n    }));\n  }\n\n  private calculatePaths(): void {\n    // TODO: better algorithms - do some maths about how the field evolves\n    const bodies = this.state.map((b) => ({\n      x: b.x.clone(),\n      v: b.v.clone(),\n      m: b.m,\n    }));\n    let k: number;\n    let r: number;\n    const V = new Vector3(0, 0, 0);\n    for (let step = 0; step < this.pathingDepth; step++) {\n      for (let i = 0; i < bodies.length; i++) {\n        for (let j = i + 1; j < bodies.length; j++) {\n          V.copy(bodies[j].x).sub(bodies[i].x); // vector from bi to bj\n          r = V.length(); // TODO: handle collisions at least enough to handle r = 0\n          k = (this.pathingStepSize * G) / (r * r);\n          V.normalize().multiplyScalar(k * bodies[j].m); // dvi\n          bodies[i].v.add(V);\n          V.normalize().multiplyScalar(-k * bodies[i].m); // dvj\n          bodies[j].v.add(V);\n\n          V.copy(bodies[i].v).multiplyScalar(this.pathingStepSize); // dxi\n          bodies[i].x.add(V);\n          V.copy(bodies[j].v).multiplyScalar(this.pathingStepSize); // dxj\n          bodies[j].x.add(V);\n        }\n      }\n\n      for (let i = 0; i < bodies.length; i++) {\n        this.state[i].path.push(bodies[i].x.clone());\n      }\n    }\n  }\n}\n","import React, {\n  createContext,\n  ReactElement,\n  ReactNode,\n  useContext,\n} from \"react\";\nimport { Universe } from \"./Universe\";\n\nconst UniverseContext = createContext<Universe>(new Universe(() => {}));\n\nexport function UniverseContextProvider({\n  children,\n  universe,\n}: {\n  children: ReactNode;\n  universe: Universe;\n}): ReactElement {\n  return (\n    <UniverseContext.Provider value={universe}>\n      {children}\n    </UniverseContext.Provider>\n  );\n}\n\nexport function useUniverse(): Universe {\n  return useContext(UniverseContext);\n}\n","import React, { ReactElement } from \"react\";\nimport { Line } from \"./Line\";\nimport { useUniverse } from \"logic\";\n\nexport function Content(): ReactElement {\n  // const universe = useRef(new Universe()).current;\n  const universe = useUniverse();\n  console.log(\"Content\");\n\n  return (\n    <>\n      {universe.state.map((body, i) => (\n        // TODO: body ids\n        <Line key={i} points={body.path} />\n      ))}\n    </>\n  );\n}\n","import React, { FC } from \"react\";\n\nexport const Lighting: FC = () => {\n  // general glow plus three slightly different-warmth lights around the equator\n  return (\n    <>\n      <ambientLight intensity={1} />\n    </>\n  );\n};\n","import React, { ReactNode } from \"react\";\nimport { Canvas } from \"@react-three/fiber\";\nimport { Lighting } from \"./Lighting\";\nimport { OrbitControls } from \"@react-three/drei\";\nimport { Colors } from \"ui\";\n\nexport function Environment({\n  children,\n}: {\n  children: ReactNode;\n}): React.ReactElement {\n  return (\n    <div style={{ position: \"absolute\", left: 0, right: 0, top: 0, bottom: 0 }}>\n      <Canvas\n        style={{ background: Colors.BLACK.toString() }}\n        camera={{ position: [0, 5, 0] }}\n        shadows\n      >\n        <gridHelper args={[20, 20]} />\n        <Lighting />\n        {children}\n        <OrbitControls autoRotate={false} />\n      </Canvas>\n    </div>\n  );\n}\n","import React, { ReactElement } from \"react\";\nimport { Colors, NumberInput, VectorInput } from \"ui\";\nimport { useUniverse } from \"logic\";\nimport styled from \"styled-components\";\n\nexport function InitialStateControls(): ReactElement {\n  const universe = useUniverse();\n\n  return (\n    <Container style={{ color: Colors.LIGHT.toString(), fontSize: 12 }}>\n      Initial state:\n      {universe.state.map((body, i) => {\n        return (\n          <BodyControlsContainer key={body.id}>\n            {body.name || `Body ${i + 1}`}\n            <VectorInput\n              label={\"Position\"}\n              value={body.x}\n              onSubmitOrBlur={universe.update}\n            />\n            <VectorInput\n              label={\"Velocity\"}\n              value={body.v}\n              onSubmitOrBlur={universe.update}\n            />\n            <NumberInput\n              label={\"Mass\"}\n              value={body.m}\n              onSubmitOrBlur={(val): void => {\n                universe.setInitialMass(body.id, val);\n                universe.update();\n              }}\n            />\n          </BodyControlsContainer>\n        );\n      })}\n    </Container>\n  );\n}\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n`;\n\nconst BodyControlsContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 4px;\n  margin-left: 8px;\n`;\n","import React, { ReactElement } from \"react\";\nimport { Colors, NumberInput, Row } from \"ui\";\nimport { useUniverse } from \"logic\";\nimport styled from \"styled-components\";\n\nexport function SimulationParameterControls(): ReactElement {\n  const universe = useUniverse();\n\n  return (\n    <Container style={{ color: Colors.LIGHT.toString(), fontSize: 12 }}>\n      Path extrapolation parameters:\n      <ControlsGroup>\n        <NumberInput\n          label={\"Pathing depth\"}\n          value={universe.pathingDepth}\n          onSubmitOrBlur={(val): void => {\n            universe.pathingDepth = val;\n            universe.update();\n          }}\n        />\n        <NumberInput\n          label={\"Step size\"}\n          value={universe.pathingStepSize}\n          onSubmitOrBlur={(val): void => {\n            universe.pathingStepSize = val;\n            universe.update();\n          }}\n        />\n      </ControlsGroup>\n    </Container>\n  );\n}\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n`;\n\nconst ControlsGroup = styled(Row)`\n  gap: 4px;\n  margin-left: 8px;\n`;\n","import React, { ReactElement } from \"react\";\nimport styled from \"styled-components\";\nimport { Colors } from \"ui\";\nimport { useWindowDimensions } from \"utilities\";\nimport { InitialStateControls } from \"./InitialStateControls\";\nimport { SimulationParameterControls } from \"./SimulationParameterControls\";\n\nexport function Controls(): ReactElement {\n  const { height: windowHeight } = useWindowDimensions();\n\n  return (\n    <ControlsContainer style={{ maxHeight: windowHeight - 32 }}>\n      <InitialStateControls />\n      <SimulationParameterControls />\n    </ControlsContainer>\n  );\n}\n\nconst ControlsContainer = styled.div`\n  position: absolute;\n  top: 16px;\n  right: 16px;\n  width: 240px;\n  min-height: 100px;\n  background-color: ${Colors.DARK.toString()};\n  border: 1px solid ${Colors.LIGHT.toString()};\n  overflow-y: auto;\n  overflow-x: hidden;\n  scroll-behaviour: smooth;\n  padding: 12px;\n  display: flex;\n  flex-direction: column;\n  gap: 32px;\n`;\n","import { useEffect, useState } from \"react\";\n\nexport function useWindowDimensions(): { width: number; height: number } {\n  const [windowDimensions, setWindowDimensions] = useState({\n    width: window.innerWidth,\n    height: window.innerHeight,\n  });\n\n  useEffect(() => {\n    function handleResize(): void {\n      setWindowDimensions({\n        width: window.innerWidth,\n        height: window.innerHeight,\n      });\n    }\n\n    window.addEventListener(\"resize\", handleResize);\n    return (): void => window.removeEventListener(\"resize\", handleResize);\n  }, []);\n\n  return windowDimensions;\n}\n","import React, { useCallback, useState } from \"react\";\nimport { Content, Controls, Environment } from \"components\";\nimport { Universe, UniverseContextProvider } from \"logic\";\n\nfunction App(): React.ReactElement {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const [_renderHelper, setRenderHelper] = useState(false);\n  const render = useCallback(\n    (): void => setRenderHelper((x): boolean => !x),\n    []\n  );\n  const [universe] = useState(() => new Universe(render));\n\n  return (\n    <>\n      <UniverseContextProvider universe={universe}>\n        <Environment>\n          <Content />\n        </Environment>\n        <Controls />\n      </UniverseContextProvider>\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\n// TODO: Replace with createRoot\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}