{"version":3,"sources":["utilities/random.ts","ui/colors.ts","components/content/Line.tsx","logic/Universe.ts","logic/UniverseContext.tsx","components/content/Content.tsx","components/environment/Lighting.tsx","components/environment/Environment.tsx","components/controls/InitialStateControls.tsx","components/controls/Controls.tsx","utilities/useWindowDimensions.ts","App.tsx","index.tsx"],"names":["random","max","Math","floor","Colors","BLACK","Color","DARK","WHITE","rgb","Line","points","color","lineGeometry","BufferGeometry","setFromPoints","console","log","geometry","attach","toString","linewidth","linecap","linejoin","extend","Line_","ThreeLine","Universe","render","state0","state","t","pathingDepth","stepSize","this","addBody","x0","Vector3","v0","m","setInitialState","calculatePaths","parameters","push","map","body","x","v","path","k","r","bodies","b","clone","V","step","i","length","j","copy","sub","normalize","multiplyScalar","add","UniverseContext","createContext","UniverseContextProvider","children","useState","setRenderHelper","useCallback","universe","Provider","value","useUniverse","useContext","Content","Lighting","intensity","Environment","style","position","left","right","top","bottom","background","camera","shadows","args","OrbitControls","autoRotate","InitialStateControls","fontSize","margin","y","z","Controls","windowHeight","width","window","innerWidth","height","innerHeight","windowDimensions","setWindowDimensions","useEffect","handleResize","addEventListener","removeEventListener","useWindowDimensions","ControlsContainer","maxHeight","styled","div","App","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d4fa3556.chunk.js","sourcesContent":["export function random(max: number): number {\n  return Math.floor(Math.random() * max);\n}\n","import Color from \"color\";\nimport { random } from \"utilities\";\n\nexport const Colors = {\n  BLACK: Color(\"#000000\"),\n  DARK: Color(\"#101113\"),\n  WHITE: Color(\"#FFFFFF\"),\n  random: (): Color => Color.rgb(random(255), random(255), random(255)),\n};\n","import { ReactThreeFiber, extend } from \"@react-three/fiber\";\nimport { BufferGeometry, Line as ThreeLine, Vector3 } from \"three\";\nimport Color from \"color\";\nimport React, { ReactElement } from \"react\";\nimport { Colors } from \"ui\";\n\nextend({ Line_: ThreeLine });\n\ndeclare global {\n  // eslint-disable-next-line @typescript-eslint/no-namespace\n  namespace JSX {\n    interface IntrinsicElements {\n      line_: ReactThreeFiber.Object3DNode<ThreeLine, typeof ThreeLine>;\n    }\n  }\n}\n\ninterface Props {\n  points: Vector3[];\n  color?: Color;\n}\n\nexport function Line({ points, color = Colors.random() }: Props): ReactElement {\n  const lineGeometry = new BufferGeometry().setFromPoints(points);\n  console.log(points);\n\n  return (\n    <line_ geometry={lineGeometry}>\n      <lineBasicMaterial\n        attach=\"material\"\n        color={color.toString()}\n        linewidth={10}\n        linecap={\"round\"}\n        linejoin={\"round\"}\n      />\n    </line_>\n  );\n}\n","import { Body, BodyParameters } from \"./Body\";\nimport { Vector3 } from \"three\";\n\nconst G = 1;\n\nexport class Universe {\n  private state0: BodyParameters[] = [];\n  public state: Body[] = []; // TODO: should this be private? or called bodies?\n  private t = 0;\n\n  private pathingDepth = 40000;\n  private stepSize = 0.001;\n\n  constructor(private render: () => void) {\n    this.addBody({\n      x0: new Vector3(0, 0, 0),\n      v0: new Vector3(0, 0, -0.12),\n      m: 100,\n    });\n    this.addBody({\n      x0: new Vector3(2.05, 0, 0),\n      v0: new Vector3(0, 1, 6),\n      m: 1,\n    });\n    this.addBody({\n      x0: new Vector3(1.95, 0, 0),\n      v0: new Vector3(0, -1, 6),\n      m: 1,\n    });\n    this.setInitialState();\n    this.calculatePaths();\n  }\n\n  public addBody(parameters: BodyParameters): void {\n    // TODO: This assumes t = 0\n    this.state0.push(parameters);\n  }\n\n  private setInitialState(): void {\n    this.state = this.state0.map((body) => ({\n      ...body,\n      x: body.x0,\n      v: body.v0,\n      path: [body.x0],\n    }));\n  }\n\n  private calculatePaths(): void {\n    // TODO: better algorithms - do some maths about how the field evolves\n    const bodies = this.state.map((b) => ({\n      x: b.x.clone(),\n      v: b.v.clone(),\n      m: b.m,\n    }));\n    let k: number;\n    let r: number;\n    const V = new Vector3(0, 0, 0);\n    for (let step = 0; step < this.pathingDepth; step++) {\n      for (let i = 0; i < bodies.length; i++) {\n        for (let j = i + 1; j < bodies.length; j++) {\n          V.copy(bodies[j].x).sub(bodies[i].x); // vector from bi to bj\n          r = V.length(); // TODO: handle collisions at least enough to handle r = 0\n          k = (this.stepSize * G) / (r * r);\n          V.normalize().multiplyScalar(k * bodies[j].m); // dvi\n          bodies[i].v.add(V);\n          V.normalize().multiplyScalar(-k * bodies[i].m); // dvj\n          bodies[j].v.add(V);\n\n          V.copy(bodies[i].v).multiplyScalar(this.stepSize); // dxi\n          bodies[i].x.add(V);\n          V.copy(bodies[j].v).multiplyScalar(this.stepSize); // dxj\n          bodies[j].x.add(V);\n        }\n      }\n\n      for (let i = 0; i < bodies.length; i++) {\n        this.state[i].path.push(bodies[i].x.clone());\n      }\n    }\n    console.log(this.state);\n  }\n}\n","import React, {\n  createContext,\n  ReactElement,\n  ReactNode,\n  useCallback,\n  useContext,\n  useState,\n} from \"react\";\nimport { Universe } from \"./Universe\";\n\nconst UniverseContext = createContext<Universe>(new Universe(() => {}));\n\nexport function UniverseContextProvider({\n  children,\n}: {\n  children: ReactNode;\n}): ReactElement {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const [_renderHelper, setRenderHelper] = useState(false);\n  const render = useCallback(\n    (): void => setRenderHelper((x): boolean => !x),\n    []\n  );\n  const [universe] = useState(new Universe(render));\n\n  return (\n    <UniverseContext.Provider value={universe}>\n      {children}\n    </UniverseContext.Provider>\n  );\n}\n\nexport function useUniverse(): Universe {\n  return useContext(UniverseContext);\n}\n","import React, { ReactElement } from \"react\";\nimport { Line } from \"./Line\";\nimport { useUniverse } from \"logic\";\n\nexport function Content(): ReactElement {\n  // const universe = useRef(new Universe()).current;\n  const universe = useUniverse();\n\n  return (\n    <>\n      {universe.state.map((body, i) => (\n        // TODO: body ids\n        <Line key={i} points={body.path} />\n      ))}\n    </>\n  );\n}\n","import React, { FC } from \"react\";\n\nexport const Lighting: FC = () => {\n  // general glow plus three slightly different-warmth lights around the equator\n  return (\n    <>\n      <ambientLight intensity={1} />\n    </>\n  );\n};\n","import React, { ReactNode } from \"react\";\nimport { Canvas } from \"@react-three/fiber\";\nimport { Lighting } from \"./Lighting\";\nimport { OrbitControls } from \"@react-three/drei\";\nimport { Colors } from \"ui\";\n\nexport function Environment({\n  children,\n}: {\n  children: ReactNode;\n}): React.ReactElement {\n  return (\n    <div style={{ position: \"absolute\", left: 0, right: 0, top: 0, bottom: 0 }}>\n      <Canvas\n        style={{ background: Colors.BLACK.toString() }}\n        camera={{ position: [0, 5, 0] }}\n        shadows\n      >\n        <gridHelper args={[20, 20]} />\n        <Lighting />\n        {children}\n        <OrbitControls autoRotate={false} />\n      </Canvas>\n    </div>\n  );\n}\n","import React, { ReactElement } from \"react\";\nimport styled from \"styled-components\";\nimport { Colors } from \"ui\";\nimport { useWindowDimensions } from \"utilities\";\nimport { useUniverse } from \"logic\";\n\nexport function InitialStateControls(): ReactElement {\n  const universe = useUniverse();\n  return (\n    <div style={{ color: Colors.WHITE.toString(), fontSize: 12 }}>\n      {universe.state.map((body, i) => {\n        // TODO: body ids\n        return (\n          <div key={i} style={{ margin: 4 }}>\n            {`position: (${body.x0.x}, ${body.x0.y}, ${body.x0.z})`}\n            <br />\n            {`velocity: (${body.x0.x}, ${body.x0.y}, ${body.x0.z})`}\n            <br />\n            {`mass: ${body.m}`}\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n","import React, { ReactElement } from \"react\";\nimport styled from \"styled-components\";\nimport { Colors } from \"ui\";\nimport { useWindowDimensions } from \"utilities\";\nimport { InitialStateControls } from \"./InitialStateControls\";\n\nexport function Controls(): ReactElement {\n  const { height: windowHeight } = useWindowDimensions();\n\n  return (\n    <ControlsContainer style={{ maxHeight: windowHeight - 32 }}>\n      <InitialStateControls />\n    </ControlsContainer>\n  );\n}\n\nconst ControlsContainer = styled.div`\n  position: absolute;\n  top: 16px;\n  right: 16px;\n  width: 240px;\n  min-height: 100px;\n  background-color: ${Colors.DARK.toString()};\n  border: 1px solid ${Colors.WHITE.toString()};\n  overflow-y: scroll;\n  scroll-behaviour: smooth;\n  padding: 12px;\n`;\n","import { useEffect, useState } from \"react\";\n\nexport function useWindowDimensions(): { width: number; height: number } {\n  const [windowDimensions, setWindowDimensions] = useState({\n    width: window.innerWidth,\n    height: window.innerHeight,\n  });\n\n  useEffect(() => {\n    function handleResize(): void {\n      setWindowDimensions({\n        width: window.innerWidth,\n        height: window.innerHeight,\n      });\n    }\n\n    window.addEventListener(\"resize\", handleResize);\n    return (): void => window.removeEventListener(\"resize\", handleResize);\n  }, []);\n\n  return windowDimensions;\n}\n","import React from \"react\";\nimport { Content, Controls, Environment } from \"components\";\nimport { UniverseContextProvider } from \"logic\";\n\nfunction App(): React.ReactElement {\n  return (\n    <>\n      <UniverseContextProvider>\n        <Environment>\n          <Content />\n        </Environment>\n        <Controls />\n      </UniverseContextProvider>\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\n// TODO: Replace with createRoot\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}